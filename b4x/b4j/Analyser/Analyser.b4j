AppType=JavaFX
Build1=Default,b4j.example
File1=main.bjl
FileGroup1=Default Group
Group=Default Group
Library1=jcore
Library2=jfx
Library3=jpoi
Library4=json
Module1=Utils
NumberOfFiles=1
NumberOfLibraries=4
NumberOfModules=1
Version=7.8
@EndOfDesignText@
#Region Project Attributes 
	#MainFormWidth: 600
	#MainFormHeight: 600 
#End Region

Sub Process_Globals
	Private fx As JFX
	Private MainForm As Form
	Private ListView1 As ListView
	Private operations() As String=Array As String("localization.json","imageclassification.json")
End Sub

Sub AppStart (Form1 As Form, Args() As String)
	MainForm = Form1
	MainForm.RootPane.LoadLayout("main") 'Load the layout file.
	MainForm.Show
End Sub

'Return true to allow the default exceptions handler to handle the uncaught exception.
Sub Application_Error (Error As Exception, StackTrace As String) As Boolean
	Return True
End Sub

Sub Button2_MouseClicked (EventData As MouseEvent)
	Dim rowNumber As Int=1
	Dim wb As PoiWorkbook
	wb.InitializeNew(True)
	Dim sheet1 As PoiSheet=wb.AddSheet("Sheet1",0)
	
    Dim head As PoiRow = sheet1.CreateRow(0)
	Dim basicInfo As List
	basicInfo.Initialize
	basicInfo.AddAll(Array As String("dir","imgName","localization","imageclassification","width","height"))
	Dim accuracyAndRecall As List
	accuracyAndRecall.Initialize
	accuracyAndRecall.AddAll(Array As String("hits","detected","accuracy","accuracyWithoutSound","hits","groundTruth","recall","recallWithoutSound","soundRecall","nonTrans","nonTransGround","sound","soundGround"))
	Dim heads As List
	heads.Initialize
	heads.AddAll(basicInfo)
	heads.AddAll(accuracyAndRecall)
	heads.AddAll(accuracyAndRecall)
	For i=0 To heads.Size-1
		head.CreateCellString(i,heads.Get(i))
	Next
	For Each one As List In ListView1.Items
		Dim data As Map
		data.Initialize
		Dim projectName As String=one.Get(0)
		Dim dirPath As String=one.Get(1)
		For Each operation As String In operations
			readJsonToMap(operation,dirPath,data)
		Next
		For Each imgName As String In NamesList(operations(0),dirPath)
			Dim m As Map=data.Get(imgName)
			Dim row As PoiRow = sheet1.CreateRow(rowNumber)
			Dim cells As Map
			cells.Initialize
			cells.Put("dir",File.GetName(File.GetFileParent(File.Combine(dirPath,imgName))))
			cells.Put("imgName",imgName)
			statisticsToCell(cells,m)
			wirteToRow(cells,row,basicInfo)
			Dim groundTruth As List=getBoxes(dirPath,projectName,imgName)
			Dim detected As List=getBoxes(dirPath,projectName&".bak",imgName)
			excludeLowProbability(groundTruth)
			getAccuracy(groundTruth,detected,cells,False)
			getRecall(groundTruth,detected,cells,False)
			AddSpecialAreasNum(groundTruth,detected,cells,False)
			AddPercent(cells)
			wirteToRow(cells,row,accuracyAndRecall)
			getAccuracy(groundTruth,detected,cells,True)
			getRecall(groundTruth,detected,cells,True)
			AddSpecialAreasNum(groundTruth,detected,cells,True)
			AddPercent(cells)
			wirteToRow(cells,row,accuracyAndRecall)
			rowNumber=rowNumber+1
		Next
	Next
	wb.Save(File.DirApp,"out.xlsx")
End Sub

Sub wirteToRow(cells As Map,row As PoiRow,order As List)
	For Each key As String In order
		row.CreateCellString(row.Cells.Size,cells.Get(key))
	Next
	cells.Clear
End Sub

Sub AddPercent(cells As Map)
	'hit, areas,nonTrans,nonTransGround,sound,soundGround
	Dim accuracy,accuracyWithoutSound As Double
	Dim recall,recallWithoutSound As Double
	Dim hits,detected,groundTruth,nonTrans,nonTransGround,sound,soundGround As Int
	hits=cells.Get("hits")
	detected=cells.Get("detected")
	groundTruth=cells.Get("groundTruth")
	nonTrans=cells.Get("nonTrans")
	nonTransGround=cells.Get("nonTransGround")
	sound=cells.Get("sound")
	soundGround=cells.Get("soundGround")
	accuracy = (hits-nonTrans)/(detected-nonTrans)
	accuracyWithoutSound = (hits-nonTrans-sound)/(detected-nonTrans-sound)
	recall = (hits-nonTrans)/(groundTruth-nonTransGround)
	recallWithoutSound = (hits-nonTrans-sound)/(groundTruth-nonTransGround-soundGround)
	cells.Put("accuracy",accuracy)
	cells.Put("accuracyWithoutSound",accuracyWithoutSound)
	cells.Put("recall",recall)
	cells.Put("recallWithoutSound",recallWithoutSound)
	Dim soundRecall As Double=sound/soundGround
	cells.Put("soundRecall",soundRecall)
End Sub

Sub statisticsToCell(cells As Map,data As Map)
	Dim index As Int=2
	For Each operationName As String In operations
		Dim operationData As Map=data.Get(operationName)
		Dim startTime,endTime As Long
		startTime=operationData.Get("startTime")
		endTime=operationData.Get("endTime")
		Dim seconds As Double=(endTime - startTime)/1000
		cells.Put(operationName.Replace(".json",""),seconds)
		index=index+1
		If index=4 Then
			cells.put("width",operationData.Get("width"))
			cells.Put("height",operationData.Get("height"))
		End If
	Next
End Sub

Sub getBoxes(dirPath As String,filename As String,imgName As String) As List
	Dim json As JSONParser
	json.Initialize(File.ReadString(dirPath,filename))
	Dim project As Map = json.NextObject
	Dim imgMap As Map = project.Get("images")
	Dim oneImg As Map=imgMap.Get(imgName)
	Dim boxes As List=oneImg.Get("boxes")
	Return boxes
End Sub

Sub getAccuracy(pGroundTruth As List,pDetected As List,cells As Map,afterClassification As Boolean)
	'减去非译元素的正确的文字区域/(检测到的区域减去非译元素)
	Dim groundTruth As List
	groundTruth.Initialize
	groundTruth.AddAll(pGroundTruth)
	Dim detected As List
	detected.Initialize
	detected.AddAll(pDetected)
	If afterClassification Then
		excludeLowProbability(detected)
	End If
	
	
	'Dim fontsyles As List
	'fontsyles.Initialize
	'fontsyles.AddAll(Array As String("非译元素"))
	'SubtractDetected(groundTruth,detected,fontsyles)
	'excludeFontstyles(groundTruth,fontsyles)
	
	Dim hits As Int=0
	Dim areas As Int=0
	For Each box1 As Map In groundTruth
		For Each box2 As Map In detected
			If isHit(box1,box2) Then
				hits=hits+1
				Exit
			End If
		Next
	Next
    

	areas=detected.Size
	
	cells.Put("hits",hits)
	cells.Put("detected",areas)
End Sub

Sub excludeLowProbability(list1 As List)
	Dim newList As List
	newList.Initialize
	For Each box As Map In list1
		If box.GetDefault("probability",1)>=0.5 Then
			newList.Add(box)
		End If
	Next
	list1.Clear
	list1.AddAll(newList)
End Sub

Sub excludeFontstyles(list1 As List,fontstyles As List)
	Dim newList As List
	newList.Initialize
	For Each box As Map In list1
		If fontstyles.IndexOf(box.GetDefault("fontstyle",""))=-1 Then
			newList.Add(box)
		End If
	Next
	list1.Clear
	list1.AddAll(newList)
End Sub

Sub SubtractDetected(pGroundTruth As List,detected As List,fontStyles As List)
	Dim groundTruth As List
	groundTruth.Initialize
	groundTruth.AddAll(pGroundTruth)
	Dim newBoxes As List
	newBoxes.Initialize
	For Each box1 As Map In detected
		Dim remove As Boolean=False
		For Each box2 As Map In groundTruth
			If fontStyles.IndexOf(box2.GetDefault("fontstyle",""))<>-1 Then
			    If isHit(box1,box2) Then
					remove=True
					groundTruth.RemoveAt(groundTruth.IndexOf(box2))
				    Exit
			    End If
			End If
		Next
		If remove=False Then
			newBoxes.Add(box1)
		End If
	Next
	detected.Clear
	detected.AddAll(newBoxes)
End Sub

Sub SpecialAreaInDetected(pGroundTruth As List,detected As List,styleName As String) As Int
	Dim num As Int=0
	Dim groundTruth As List
	groundTruth.Initialize
	groundTruth.AddAll(pGroundTruth)
	For Each box1 As Map In detected
		Dim isSoundWord As Boolean=False
		For Each box2 As Map In groundTruth
			If box2.GetDefault("fontstyle","")=styleName Then
				If isHit(box1,box2) Then
					isSoundWord=True
					groundTruth.RemoveAt(groundTruth.IndexOf(box2))
					Exit
				End If
			End If
		Next
		If isSoundWord Then
			num=num+1
		End If
	Next
	Return num
End Sub

Sub SpecialAreasInGroundTruth(groundTruth As List,styleName As String) As Int
	Dim num As Int=0
	For Each box As Map In groundTruth
		If box.GetDefault("fontstyle","")=styleName Then
			num=num+1
		End If
	Next
	Return num
End Sub

Sub getRecall(pGroundTruth As List,pDetected As List,cells As Map,afterClassification As Boolean)
	'减去非译的检测到的正确的文字区域/减去非译的所有文字区域
	Dim GroundTruth As List
	GroundTruth.Initialize
	GroundTruth.AddAll(pGroundTruth)
	Dim Detected As List
	Detected.Initialize
	Detected.AddAll(pDetected)
	If afterClassification Then
		excludeLowProbability(Detected)
	End If
	Dim hits As Int=0
	Dim areas As Int=0
	
	'Dim fontsyles As List
	'fontsyles.Initialize
	'fontsyles.AddAll(Array As String("非译元素"))
	'SubtractDetected(GroundTruth,Detected,fontsyles)
	'excludeFontstyles(GroundTruth,fontsyles)
	
	For Each box1 As Map In GroundTruth
		For Each box2 As Map In Detected
			If isHit(box1,box2) Then
				hits=hits+1
				Exit
			End If
		Next
	Next
	
	areas=GroundTruth.Size
	

	cells.Put("hits",hits)
	cells.Put("groundTruth",areas)
End Sub

Sub isHit(box1 As Map,box2 As Map) As Boolean
	Dim boxGeometry1, boxGeometry2 As Map
	boxGeometry1=box1.Get("geometry")
	boxGeometry2=box2.Get("geometry")
	If Utils.OverlappingPercent(boxGeometry1,boxGeometry2)>0.7 Then
		Return True
	Else
		Return False
	End If
End Sub

Sub AddSpecialAreasNum(pGroundTruth As List,pDetected As List,cells As Map,afterClassification As Boolean)
	Dim groundTruth As List
	groundTruth.Initialize
	groundTruth.AddAll(pGroundTruth)
	Dim detected As List
	detected.Initialize
	detected.AddAll(pDetected)
	If afterClassification Then
		excludeLowProbability(detected)
	End If
	cells.Put("nonTrans",SpecialAreaInDetected(groundTruth,detected,"非译元素"))
	cells.Put("nonTransGround",SpecialAreasInGroundTruth(groundTruth,"非译元素"))
	cells.put("sound",SpecialAreaInDetected(groundTruth,detected,"拟声词"))
	cells.put("soundGround",SpecialAreasInGroundTruth(groundTruth,"拟声词"))
End Sub

Sub NamesList(operationName As String,dirPath As String) As List
	Dim json As JSONParser
	json.Initialize(File.ReadString(dirPath,operationName))
	Dim imgList As List=json.NextArray
	Dim imgNamesList As List
	imgNamesList.Initialize
	For Each one As Map In imgList
		imgNamesList.Add(one.Get("imgName"))
	Next
	Return imgNamesList
End Sub

Sub readJsonToMap(operationName As String,dirPath As String,data As Map)
	Dim json As JSONParser
	json.Initialize(File.ReadString(dirPath,operationName))
	Dim imgList As List=json.NextArray
	For Each operationData As Map In imgList
		Dim imgName As String=operationData.Get("imgName")
		Dim one As Map
		one.Initialize
		If data.ContainsKey(imgName) Then
			one=data.Get(imgName)
		End If
		one.Put(operationName,operationData)
		data.Put(imgName,one)
	Next
End Sub

Sub Button1_MouseClicked (EventData As MouseEvent)
	Dim dc As DirectoryChooser
	dc.Initialize
	Dim dirPath As String=dc.Show(MainForm)
	import(dirPath)
End Sub


Public Sub import(dirPath As String)
	Dim filesList As List
	filesList.Initialize
	importDir(dirPath,filesList)
	For Each one As List  In filesList
		ListView1.Items.Add(one)
	Next
End Sub

Sub importDir(dirPath As String,filesList As List)
	Dim files As List=File.ListFiles(dirPath)
	For Each filename As String In files
		If File.IsDirectory(dirPath,filename) Then
			importDir(File.Combine(dirPath,filename),filesList)
		End If
		Dim lowerCaseName As String=filename.ToLowerCase
		If lowerCaseName.EndsWith(".itp") Then
			Dim one As List
			one.Initialize
			one.Add(filename)
			one.Add(dirPath)
			filesList.Add(one)
		End If
	Next
End Sub

Sub Button3_MouseClicked (EventData As MouseEvent)
	For Each one As List In ListView1.Items
		Dim dirPath As String=one.Get(1)
		Dim projectName As String=one.Get(0)
		If File.Exists(dirPath,projectName&".bak")=False Then
			File.Copy(dirPath,projectName,dirPath,projectName&".bak")
		Else
			fx.Msgbox(MainForm,"已经备份过了，不进行操作。","")
		End If
	Next
End Sub